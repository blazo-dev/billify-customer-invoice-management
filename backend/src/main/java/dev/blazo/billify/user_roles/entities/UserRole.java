package dev.blazo.billify.user_roles.entities;

import com.fasterxml.jackson.annotation.JsonInclude;
import dev.blazo.billify.roles.entities.Role;
import dev.blazo.billify.users.entities.User;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;

/**
 * Represents the association between users and their roles in the system.
 * This class is used to map the many-to-many relationship between users and roles.
 * It includes a unique identifier for each record and the relationships to the corresponding user and role.
 * The user can only appear once in this table, but a role can be assigned to multiple users.
 *
 * @author Bryan Lazo (<a href="https://blazo-dev.vercel.app">...</a>)
 * @version 1.0.0
 * @since 4/27/2025
 */
@Data
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(NON_NULL)  // Only include non-null fields in the serialized JSON response
@Entity  // This defines the JPA entity, mapping to the 'user_roles' table in the database
@Table(name = "user_roles")  // Specifies the name of the table in the database
public class UserRole {

    /**
     * The unique identifier for the UserRole record.
     * This field is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The user associated with the role.
     * This relationship is one-to-one, ensuring each user appears only once in the user_roles table.
     * The 'user_id' column in the database is a foreign key to the 'users' table.
     */
    @OneToOne
    @JoinColumn(name = "user_id", nullable = false, unique = true)  // Foreign key to the User table
    private User user;

    /**
     * The role assigned to the user.
     * This relationship is many-to-one, meaning multiple users can have the same role.
     * The 'role_id' column in the database is a foreign key to the 'roles' table.
     */
    @ManyToOne
    @JoinColumn(name = "role_id", nullable = false)  // Foreign key to the Role table
    private Role role;
}
