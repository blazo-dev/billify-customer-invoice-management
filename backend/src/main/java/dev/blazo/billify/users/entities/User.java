package dev.blazo.billify.users.entities;

import com.fasterxml.jackson.annotation.JsonInclude;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

import java.util.Date;

import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;

/**
 * Represents a User entity in the system.
 * This class is used to manage user data such as personal information, account status, and authentication details.
 * It includes validation annotations to ensure correct data is stored, as well as automatic inclusion
 * of non-null fields in the JSON response.
 *
 * @author Bryan Lazo
 * @version 1.0.0
 * @since 4/26/2025
 */
@Data
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(NON_NULL)  // Only include non-null fields in the serialized JSON response
@Entity  // This defines the JPA entity, mapping to the 'users' table in the database
@Table(name = "users")  // Specifies the name of the table in the database
public class User {

    /**
     * The unique identifier for the users.
     * This field is auto-generated by the database as an auto-incremented value.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The first name of the users.
     * This field is required and has a maximum length of 50 characters.
     */
    @NotEmpty(message = "First name is required")
    @Size(max = 50, message = "First name must be at most 50 characters")
    @Column(nullable = false, length = 50)  // Ensures this field is not null in the database
    private String firstName;

    /**
     * The last name of the users.
     * This field is required and has a maximum length of 50 characters.
     */
    @NotEmpty(message = "Last name is required")
    @Size(max = 50, message = "Last name must be at most 50 characters")
    @Column(nullable = false, length = 50)
    private String lastName;

    /**
     * The email address of the users.
     * This field is required, must be a valid email, and should be unique in the database.
     * It has a maximum length of 100 characters.
     */
    @NotEmpty(message = "Email is required")
    @Email(message = "Invalid email format")
    @Size(max = 100, message = "Email must be at most 100 characters")
    @Column(nullable = false, length = 100, unique = true)
    private String email;

    /**
     * The user's password.
     * This field does not have validation for security, but it should be hashed before storing in the database.
     * It has a maximum length of 255 characters.
     */
    @Size(max = 255, message = "Password must be at most 255 characters")
    private String password;

    /**
     * The user's physical address.
     * This field is optional, with a maximum length of 255 characters.
     */
    @Size(max = 255, message = "Address must be at most 255 characters")
    private String address;

    /**
     * The user's phone number.
     * This field is optional, with a maximum length of 30 characters.
     */
    @Size(max = 30, message = "Phone must be at most 30 characters")
    private String phone;

    /**
     * The user's title (e.g., Mr., Mrs., Dr.).
     * This field is optional, with a maximum length of 50 characters.
     */
    @Size(max = 50, message = "Title must be at most 50 characters")
    private String title;

    /**
     * A short biography of the user.
     * This field is optional, with a maximum length of 255 characters.
     */
    @Size(max = 255, message = "Bio must be at most 255 characters")
    private String bio;

    /**
     * The URL to the user's profile image.
     * This field is optional but has a default value, with a maximum length of 255 characters.
     */
    @Size(max = 255, message = "Image URL must be at most 255 characters")
    private String imageUrl = "https://cdn-icons-png.flaticon.com/512/149/149071.png";

    /**
     * The account status of the users.
     * Indicates whether the user's account is enabled.
     * Default is false, meaning the account is disabled.
     */
    @Column(name = "enabled")
    private Boolean isEnabled = false;

    /**
     * Whether the user has multifactor authentication enabled.
     * Default is false, meaning MFA is not enabled.
     */
    @Column(name = "use_mfa")
    private Boolean isUsingMfa = false;

    /**
     * Whether the user's account is locked.
     * Default is true, meaning the account is not locked.
     */
    @Column(name = "non_locked")
    private Boolean isNotLocked = true;

    /**
     * Timestamp of when the user account was created.
     * This field is automatically set to the current date and time when the entity is persisted.
     * It cannot be updated after it is set.
     */
    @Column(nullable = false, updatable = false)
    @Temporal(TemporalType.TIMESTAMP)  // Defines the field as a timestamp in the database
    private Date createdAt;

    /**
     * Sets the creation date of the user account before persisting the entity.
     * This method ensures the 'createdAt' field is automatically set before the entity is saved in the database.
     * It is only set if it has not been manually assigned.
     */
    @PrePersist
    public void prePersist() {
        if (this.createdAt == null) {
            this.createdAt = new Date();  // Set the creation date if not already set
        }
    }
}
